#!/usr/bin/env python3
"""
Virtual MCU MIDI Controller for Universal Audio LUNA

A Flask web application that provides HTTP endpoints and a web interface
for controlling LUNA faders via virtual MIDI using the Mackie Control Universal protocol.

Author: Generated by GitHub Copilot
License: MIT
"""

import os
import logging
from flask import Flask, jsonify, render_template_string
import mido
from mido import Message

# Configuration
MIDI_PORT_NAME = os.getenv('MIDI_PORT', 'LUNA-MCU')
HOST = '0.0.0.0'  # Listen on all network interfaces for mobile access
PORT = int(os.getenv('PORT', 5001))  # Use 5001 by default to avoid macOS AirPlay conflict
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__)

# Global MIDI output port
midi_out = None


def initialize_midi():
    """Initialize virtual MIDI output port"""
    global midi_out
    
    try:
        # List available MIDI output ports
        available_ports = mido.get_output_names()
        logger.info(f"Available MIDI ports: {available_ports}")
        
        # Try to open the specified port
        if MIDI_PORT_NAME in available_ports:
            midi_out = mido.open_output(MIDI_PORT_NAME)
            logger.info(f"Successfully opened MIDI port: {MIDI_PORT_NAME}")
        else:
            # If the exact name isn't found, try to find a partial match
            matching_ports = [port for port in available_ports if MIDI_PORT_NAME.lower() in port.lower()]
            
            if matching_ports:
                midi_out = mido.open_output(matching_ports[0])
                logger.info(f"Opened MIDI port with partial match: {matching_ports[0]}")
            else:
                logger.error(f"MIDI port '{MIDI_PORT_NAME}' not found!")
                logger.error("Please create a virtual MIDI port or check the port name.")
                logger.error("Available ports: " + ", ".join(available_ports) if available_ports else "None")
                return False
                
    except Exception as e:
        logger.error(f"Failed to initialize MIDI: {e}")
        return False
    
    return True


def send_mcu_fader_message(fader_number, value):
    """
    Send MCU fader control message via MIDI pitch bend
    
    Args:
        fader_number (int): Fader number (1-3)
        value (int): Fader value (0-127)
    
    Returns:
        bool: True if message sent successfully, False otherwise
    """
    if not midi_out:
        logger.error("MIDI output not initialized")
        return False
    
    try:
        # MCU uses pitch bend messages for faders
        # Channel mapping: Fader 1 = Channel 0, Fader 2 = Channel 1, Fader 3 = Channel 2
        channel = fader_number - 1
        
        # Convert 7-bit value (0-127) to 14-bit pitch bend value (-8192 to 8191)
        # MCU expects the full 14-bit range for fader control
        # mido uses signed pitch bend values: -8192 to 8191
        pitch_value = int((value / 127.0) * 16383) - 8192
        
        # Create pitch bend message
        # mido handles the LSB/MSB split internally
        msg = Message('pitchwheel', channel=channel, pitch=pitch_value)
        
        # Send MIDI message
        midi_out.send(msg)
        
        logger.info(f"Sent MCU fader {fader_number} (ch {channel}): value={value} "
                   f"(pitch_value: {pitch_value})")
        
        return True
        
    except Exception as e:
        logger.error(f"Error sending MIDI message: {e}")
        return False


@app.route('/')
def index():
    """Serve the main web interface"""
    # Read the HTML template from static folder
    try:
        with open('static/index.html', 'r') as f:
            html_content = f.read()
        return html_content
    except FileNotFoundError:
        # Fallback to embedded HTML if static file not found
        return render_template_string("""
        <!DOCTYPE html>
        <html>
        <head>
            <title>LUNA MCU Controller</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
                .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
                h1 { color: #333; text-align: center; margin-bottom: 30px; }
                .fader-group { margin: 20px 0; padding: 20px; border: 1px solid #ddd; border-radius: 4px; }
                .fader-label { font-weight: bold; margin-bottom: 10px; color: #555; }
                .fader-slider { width: 100%; margin: 10px 0; }
                .fader-value { font-family: monospace; color: #007cba; font-weight: bold; }
                .status { text-align: center; margin-top: 20px; padding: 10px; background: #e8f5e8; border-radius: 4px; }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>LUNA MCU Virtual Controller</h1>
                <div class="fader-group">
                    <div class="fader-label">Fader 1</div>
                    <input type="range" class="fader-slider" id="fader1" min="0" max="127" value="64" oninput="updateFader(1, this.value)">
                    <div>Value: <span class="fader-value" id="value1">64</span></div>
                </div>
                <div class="fader-group">
                    <div class="fader-label">Fader 2</div>
                    <input type="range" class="fader-slider" id="fader2" min="0" max="127" value="64" oninput="updateFader(2, this.value)">
                    <div>Value: <span class="fader-value" id="value2">64</span></div>
                </div>
                <div class="fader-group">
                    <div class="fader-label">Fader 3</div>
                    <input type="range" class="fader-slider" id="fader3" min="0" max="127" value="64" oninput="updateFader(3, this.value)">
                    <div>Value: <span class="fader-value" id="value3">64</span></div>
                </div>
                <div class="status" id="status">Ready - Move sliders to control LUNA faders</div>
            </div>
            <script>
                async function updateFader(faderNum, value) {
                    document.getElementById('value' + faderNum).textContent = value;
                    document.getElementById('status').textContent = 'Sending...';
                    
                    try {
                        const response = await fetch('/api/fader/' + faderNum + '/' + value);
                        const data = await response.json();
                        
                        if (data.status === 'ok') {
                            document.getElementById('status').textContent = 
                                'Sent: Fader ' + data.fader + ' = ' + data.value;
                        } else {
                            document.getElementById('status').textContent = 'Error: ' + JSON.stringify(data);
                        }
                    } catch (error) {
                        document.getElementById('status').textContent = 'Network error: ' + error.message;
                    }
                }
            </script>
        </body>
        </html>
        """)


@app.route('/api/fader/<int:fader_number>/<int:value>')
def control_fader(fader_number, value):
    """
    HTTP endpoint to control MCU faders
    
    Args:
        fader_number (int): Fader number (1-3)
        value (int): Fader value (0-127)
    
    Returns:
        JSON response with status
    """
    # Validate inputs
    if fader_number not in [1, 2, 3]:
        return jsonify({
            "status": "error",
            "message": "Invalid fader number. Must be 1, 2, or 3."
        }), 400
    
    if not (0 <= value <= 127):
        return jsonify({
            "status": "error", 
            "message": "Invalid value. Must be between 0 and 127."
        }), 400
    
    # Send MIDI message
    success = send_mcu_fader_message(fader_number, value)
    
    if success:
        return jsonify({
            "status": "ok",
            "fader": fader_number,
            "value": value
        })
    else:
        return jsonify({
            "status": "error",
            "message": "Failed to send MIDI message"
        }), 500


@app.route('/api/status')
def get_status():
    """Get MIDI connection status"""
    return jsonify({
        "midi_port": MIDI_PORT_NAME,
        "connected": midi_out is not None,
        "available_ports": mido.get_output_names()
    })


def cleanup():
    """Clean up MIDI connections"""
    global midi_out
    if midi_out:
        try:
            midi_out.close()
            logger.info("MIDI port closed successfully")
        except Exception as e:
            logger.error(f"Error closing MIDI port: {e}")


if __name__ == '__main__':
    try:
        logger.info("Starting Virtual MCU MIDI Controller for LUNA")
        logger.info(f"Looking for MIDI port: {MIDI_PORT_NAME}")
        
        # Initialize MIDI
        if not initialize_midi():
            logger.error("Failed to initialize MIDI. Exiting.")
            exit(1)
        
        logger.info(f"Starting web server on {HOST}:{PORT}")
        logger.info(f"Open http://{HOST}:{PORT} in your browser")
        
        # Start Flask app
        try:
            app.run(host=HOST, port=PORT, debug=DEBUG)
        except KeyboardInterrupt:
            logger.info("Received shutdown signal")
        finally:
            cleanup()
            
    except Exception as e:
        logger.error(f"Application error: {e}")
        cleanup()
        exit(1)
