#!/usr/bin/env python3
"""
Dashboard Controller for LUNA MCU Interface

A Flask web application that provides a dashboard to control:
- Number of available tracks
- Track names 
- User names for ports 5001 and 5002

Author: Generated by GitHub Copilot
License: MIT
"""

import os
import json
import logging
from flask import Flask, jsonify, render_template_string, request
from datetime import datetime

# Configuration
HOST = '0.0.0.0'
DASHBOARD_PORT = 5003
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Set up logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Initialize Flask app
dashboard_app = Flask(__name__)

# Configuration file path
CONFIG_FILE = 'config.json'

# Default configuration
DEFAULT_CONFIG = {
    "tracks": {
        "count": 3,
        "names": ["Track 1", "Track 2", "Track 3"],
        "cc": [3, 4, 5]
    },
    "headphones_cc": 1,
    "backing_cc": 2,
    "users": {
        "port_5001": "User 1",
        "port_5002": "User 2"
    },
    "last_updated": None
}

def load_config():
    """Load configuration from JSON file or create default if not exists."""
    try:
        if os.path.exists(CONFIG_FILE):
            with open(CONFIG_FILE, 'r') as f:
                config = json.load(f)
                # Ensure all required keys exist
                if 'tracks' not in config:
                    config['tracks'] = DEFAULT_CONFIG['tracks']
                else:
                    if 'cc' not in config['tracks']:
                        config['tracks']['cc'] = DEFAULT_CONFIG['tracks']['cc'][:config['tracks'].get('count', 3)]
                if 'users' not in config:
                    config['users'] = DEFAULT_CONFIG['users']
                if 'headphones_cc' not in config:
                    config['headphones_cc'] = DEFAULT_CONFIG['headphones_cc']
                if 'backing_cc' not in config:
                    config['backing_cc'] = DEFAULT_CONFIG['backing_cc']
                return config
        else:
            # Create default config file
            save_config(DEFAULT_CONFIG)
            return DEFAULT_CONFIG
    except Exception as e:
        logger.error(f"Error loading config: {e}")
        return DEFAULT_CONFIG

def save_config(config):
    """Save configuration to JSON file."""
    try:
        config['last_updated'] = datetime.now().isoformat()
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=2)
        logger.info("Configuration saved successfully")
        return True
    except Exception as e:
        logger.error(f"Error saving config: {e}")
        return False

def get_dashboard_html():
    """Generate the dashboard HTML interface."""
    return """
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>LUNA MCU Dashboard</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
                font-family: "Anonymous Pro", monospace;
            }

            body {
                background-color: #e0d7ce;
                min-height: 100vh;
                padding: 20px;
            }

            .container {
                max-width: 800px;
                margin: 0 auto;
                background: #d4cbc4;
                border-radius: 20px;
                padding: 30px;
                box-shadow: 
                    inset 1px 1px 3px #908a85e6, 
                    inset -1px -1px 2px #ffffffe6,
                    -1px -1px 2px #908a8580, 
                    1px 1px 2px #ffffff4c;
            }

            h1 {
                text-align: center;
                margin-bottom: 30px;
                color: #000000;
                font-size: 28px;
                font-weight: 700;
            }

            .section {
                background: #e0d7ce;
                border-radius: 15px;
                padding: 20px;
                margin-bottom: 20px;
                box-shadow: 
                    1px 1px 3px #908a85e6, 
                    -1px -1px 2px #ffffffe6;
            }

            .section h2 {
                color: #000000;
                margin-bottom: 15px;
                font-size: 18px;
                font-weight: 600;
            }

            .form-group {
                margin-bottom: 15px;
            }

            label {
                display: block;
                margin-bottom: 5px;
                color: #000000;
                font-weight: 500;
            }

            input[type="number"], 
            input[type="text"] {
                width: 100%;
                padding: 10px;
                border: none;
                border-radius: 8px;
                background: #f0e9e2;
                color: #000000;
                font-family: inherit;
                box-shadow: 
                    inset 1px 1px 2px #908a8580,
                    inset -1px -1px 1px #ffffff80;
            }

            input[type="number"]:focus,
            input[type="text"]:focus {
                outline: none;
                box-shadow: 
                    inset 2px 2px 4px #908a85b3,
                    inset -1px -1px 1px #ffffff80;
            }

            .track-inputs {
                display: flex;
                flex-direction: column;
                gap: 10px;
            }

            .track-input {
                display: flex;
                align-items: center;
                gap: 10px;
            }

            .track-input label {
                min-width: 80px;
                margin-bottom: 0;
                font-size: 14px;
            }

            .track-input input.track-name-input {
                flex: 1;
            }

            .track-input input.cc-input {
                width: 60px;
            }

            .user-inputs {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 15px;
            }

            .btn {
                background: #90db86;
                color: #000000;
                border: none;
                padding: 12px 24px;
                border-radius: 10px;
                font-family: inherit;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.2s ease;
                box-shadow: 
                    1px 1px 2px #908a8580,
                    -1px -1px 1px #ffffff80;
            }

            .btn:hover {
                background: #7bc972;
                box-shadow: 
                    inset 1px 1px 2px #6bb762,
                    1px 1px 3px #908a8580;
            }

            .btn:active {
                box-shadow: 
                    inset 2px 2px 4px #6bb762;
            }

            .btn-container {
                text-align: center;
                margin-top: 20px;
            }

            .status {
                text-align: center;
                padding: 10px;
                margin-top: 15px;
                border-radius: 8px;
                font-weight: 500;
            }

            .status.success {
                background: #90db86;
                color: #000000;
            }

            .status.error {
                background: #ff6b6b;
                color: white;
            }

            .current-config {
                background: #f0e9e2;
                border-radius: 10px;
                padding: 15px;
                margin-bottom: 15px;
                font-size: 14px;
            }

            .config-item {
                margin-bottom: 8px;
                color: #000000;
            }

            .config-item strong {
                color: #000000;
            }

            .server-links {
                text-align: center;
                margin-top: 20px;
                padding: 15px;
                background: #f0e9e2;
                border-radius: 10px;
            }

            .server-links h3 {
                margin-bottom: 10px;
                color: #000000;
            }

            .server-links a {
                display: inline-block;
                margin: 5px 10px;
                padding: 8px 15px;
                background: #d4cbc4;
                color: #000000;
                text-decoration: none;
                border-radius: 8px;
                font-weight: 500;
                transition: background 0.2s ease;
            }

            .server-links a:hover {
                background: #c4bbb4;
            }

            @media (max-width: 600px) {
                .user-inputs {
                    grid-template-columns: 1fr;
                }
                
                .track-input {
                    flex-direction: column;
                    align-items: stretch;
                }
                
                .track-input label {
                    min-width: auto;
                }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>LUNA MCU Dashboard</h1>
            
            <div class="server-links">
                <h3>Server Links</h3>
                <a href="http://localhost:5001" target="_blank">Port 5001 (MCU Faders)</a>
                <a href="http://localhost:5002" target="_blank">Port 5002 (CC Controls)</a>
            </div>

            <div class="section">
                <h2>Current Configuration</h2>
                <div class="current-config" id="currentConfig">
                    Loading...
                </div>
            </div>

            <div class="section">
                <h2>Track Configuration</h2>
                <div class="form-group">
                    <label for="trackCount">Number of Tracks:</label>
                    <input type="number" id="trackCount" min="1" max="8" value="3">
                </div>
                <div class="form-group">
                    <label for="headphonesCC">Headphones CC:</label>
                    <input type="number" id="headphonesCC" min="0" max="127" value="1">
                </div>
                <div class="form-group">
                    <label for="backingCC">Backing CC:</label>
                    <input type="number" id="backingCC" min="0" max="127" value="2">
                </div>
                <div class="track-inputs" id="trackInputs">
                    <!-- Track name inputs will be generated here -->
                </div>
            </div>

            <div class="section">
                <h2>User Configuration</h2>
                <div class="user-inputs">
                    <div class="form-group">
                        <label for="user5001">Port 5001 User Name:</label>
                        <input type="text" id="user5001" placeholder="Enter user name">
                    </div>
                    <div class="form-group">
                        <label for="user5002">Port 5002 User Name:</label>
                        <input type="text" id="user5002" placeholder="Enter user name">
                    </div>
                </div>
            </div>

            <div class="btn-container">
                <button class="btn" onclick="saveConfiguration()">Save Configuration</button>
            </div>

            <div class="status" id="status" style="display: none;"></div>
        </div>

        <script>
            let currentConfig = {};

            // Load configuration on page load
            document.addEventListener('DOMContentLoaded', function() {
                loadConfiguration();
            });

            async function loadConfiguration() {
                try {
                    const response = await fetch('/api/config');
                    currentConfig = await response.json();
                    updateUI();
                    updateCurrentConfigDisplay();
                } catch (error) {
                    showStatus('Error loading configuration: ' + error.message, 'error');
                }
            }

            function updateUI() {
                // Update track count
                document.getElementById('trackCount').value = currentConfig.tracks.count;

                // Update monitor CC values
                document.getElementById('headphonesCC').value = currentConfig.headphones_cc;
                document.getElementById('backingCC').value = currentConfig.backing_cc;

                // Update user names
                document.getElementById('user5001').value = currentConfig.users.port_5001;
                document.getElementById('user5002').value = currentConfig.users.port_5002;

                // Generate track inputs
                generateTrackInputs();
            }

            function generateTrackInputs() {
                const count = parseInt(document.getElementById('trackCount').value);
                const container = document.getElementById('trackInputs');
                container.innerHTML = '';

                for (let i = 1; i <= count; i++) {
                    const trackDiv = document.createElement('div');
                    trackDiv.className = 'track-input';

                    const label = document.createElement('label');
                    label.textContent = `Track ${i}:`;

                    const input = document.createElement('input');
                    input.type = 'text';
                    input.id = `track${i}`;
                    input.placeholder = `Enter name for track ${i}`;
                    input.value = currentConfig.tracks.names[i-1] || `Track ${i}`;
                    input.className = 'track-name-input';

                    const ccInput = document.createElement('input');
                    ccInput.type = 'number';
                    ccInput.id = `track${i}cc`;
                    ccInput.min = '0';
                    ccInput.max = '127';
                    ccInput.placeholder = `CC`;
                    const defaultCc = i + 2;
                    ccInput.value = (currentConfig.tracks.cc && currentConfig.tracks.cc[i-1] !== undefined)
                        ? currentConfig.tracks.cc[i-1]
                        : defaultCc;
                    ccInput.className = 'cc-input';

                    trackDiv.appendChild(label);
                    trackDiv.appendChild(input);
                    trackDiv.appendChild(ccInput);
                    container.appendChild(trackDiv);
                }
            }

            function updateCurrentConfigDisplay() {
                const configDiv = document.getElementById('currentConfig');
                const lastUpdated = currentConfig.last_updated ? 
                    new Date(currentConfig.last_updated).toLocaleString() : 
                    'Never';
                
                configDiv.innerHTML = `
                    <div class="config-item"><strong>Track Count:</strong> ${currentConfig.tracks.count}</div>
                    <div class="config-item"><strong>Track Names:</strong> ${currentConfig.tracks.names.join(', ')}</div>
                    <div class="config-item"><strong>Track CCs:</strong> ${currentConfig.tracks.cc.join(', ')}</div>
                    <div class="config-item"><strong>Headphones CC:</strong> ${currentConfig.headphones_cc}</div>
                    <div class="config-item"><strong>Backing CC:</strong> ${currentConfig.backing_cc}</div>
                    <div class="config-item"><strong>Port 5001 User:</strong> ${currentConfig.users.port_5001}</div>
                    <div class="config-item"><strong>Port 5002 User:</strong> ${currentConfig.users.port_5002}</div>
                    <div class="config-item"><strong>Last Updated:</strong> ${lastUpdated}</div>
                `;
            }

            // Add event listener for track count changes
            document.getElementById('trackCount').addEventListener('input', generateTrackInputs);

            async function saveConfiguration() {
                try {
                    const trackCount = parseInt(document.getElementById('trackCount').value);
                    const trackNames = [];
                    const trackCC = [];

                    for (let i = 1; i <= trackCount; i++) {
                        const trackName = document.getElementById(`track${i}`).value || `Track ${i}`;
                        trackNames.push(trackName);
                        const ccVal = parseInt(document.getElementById(`track${i}cc`).value) || i + 2;
                        trackCC.push(ccVal);
                    }

                    const config = {
                        tracks: {
                            count: trackCount,
                            names: trackNames,
                            cc: trackCC
                        },
                        headphones_cc: parseInt(document.getElementById('headphonesCC').value) || 1,
                        backing_cc: parseInt(document.getElementById('backingCC').value) || 2,
                        users: {
                            port_5001: document.getElementById('user5001').value || 'User 1',
                            port_5002: document.getElementById('user5002').value || 'User 2'
                        }
                    };

                    const response = await fetch('/api/config', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(config)
                    });

                    const result = await response.json();
                    
                    if (result.status === 'success') {
                        currentConfig = result.config;
                        updateCurrentConfigDisplay();
                        showStatus('Configuration saved successfully!', 'success');
                    } else {
                        showStatus('Error saving configuration: ' + result.message, 'error');
                    }
                } catch (error) {
                    showStatus('Error saving configuration: ' + error.message, 'error');
                }
            }

            function showStatus(message, type) {
                const statusDiv = document.getElementById('status');
                statusDiv.textContent = message;
                statusDiv.className = 'status ' + type;
                statusDiv.style.display = 'block';
                
                setTimeout(() => {
                    statusDiv.style.display = 'none';
                }, 3000);
            }
        </script>
    </body>
    </html>
    """

@dashboard_app.route('/')
def dashboard_index():
    """Serve the dashboard interface."""
    return get_dashboard_html()

@dashboard_app.route('/api/config', methods=['GET'])
def get_config():
    """Get current configuration."""
    config = load_config()
    return jsonify(config)

@dashboard_app.route('/api/config', methods=['POST'])
def save_config_endpoint():
    """Save new configuration."""
    try:
        data = request.get_json()

        if not data:
            return jsonify({
                "status": "error",
                "message": "No data provided",
            }), 400

        # Validate data structure
        required_top = ['tracks', 'users', 'headphones_cc', 'backing_cc']
        for key in required_top:
            if key not in data:
                return jsonify({
                    "status": "error",
                    "message": f"Missing field: {key}",
                }), 400

        # Validate tracks
        tracks = data['tracks']
        if 'count' not in tracks or 'names' not in tracks or 'cc' not in tracks:
            return jsonify({
                "status": "error",
                "message": "Invalid tracks data",
            }), 400

        if not isinstance(tracks['count'], int) or tracks['count'] < 1 or tracks['count'] > 8:
            return jsonify({
                "status": "error",
                "message": "Track count must be between 1 and 8",
            }), 400

        if not isinstance(tracks['names'], list) or len(tracks['names']) != tracks['count']:
            return jsonify({
                "status": "error",
                "message": "Track names must be a list matching track count",
            }), 400

        if not isinstance(tracks['cc'], list) or len(tracks['cc']) != tracks['count']:
            return jsonify({
                "status": "error",
                "message": "Track CCs must be a list matching track count",
            }), 400

        for cc_val in tracks['cc']:
            if not isinstance(cc_val, int) or cc_val < 0 or cc_val > 127:
                return jsonify({
                    "status": "error",
                    "message": "Track CC values must be 0-127",
                }), 400

        for field in ['headphones_cc', 'backing_cc']:
            if not isinstance(data[field], int) or data[field] < 0 or data[field] > 127:
                return jsonify({
                    "status": "error",
                    "message": f"{field} must be 0-127",
                }), 400

        # Validate users
        users = data['users']
        if 'port_5001' not in users or 'port_5002' not in users:
            return jsonify({
                "status": "error",
                "message": "Invalid users data",
            }), 400

        # Save configuration
        if save_config(data):
            return jsonify({
                "status": "success",
                "message": "Configuration saved successfully",
                "config": load_config()
            })
        else:
            return jsonify({
                "status": "error",
                "message": "Failed to save configuration",
            }), 500

    except Exception as e:
        logger.error(f"Error in save_config_endpoint: {e}")
        return jsonify({
            "status": "error",
            "message": str(e)
        }), 500
@dashboard_app.route('/api/status')
def dashboard_status():
    """Get dashboard status."""
    config = load_config()
    return jsonify({
        "status": "ok",
        "port": DASHBOARD_PORT,
        "config_file": CONFIG_FILE,
        "config_exists": os.path.exists(CONFIG_FILE),
        "tracks_count": config['tracks']['count'],
        "last_updated": config.get('last_updated')
    })

if __name__ == '__main__':
    try:
        logger.info("Starting LUNA MCU Dashboard")
        logger.info(f"Dashboard running on http://{HOST}:{DASHBOARD_PORT}")
        logger.info("Use this dashboard to control track settings and user names for ports 5001 and 5002")
        
        # Load initial configuration
        config = load_config()
        logger.info(f"Loaded configuration: {config['tracks']['count']} tracks, "
                   f"Users: {config['users']['port_5001']}, {config['users']['port_5002']}")
        
        dashboard_app.run(host=HOST, port=DASHBOARD_PORT, debug=DEBUG)
        
    except KeyboardInterrupt:
        logger.info("Dashboard shutdown requested")
    except Exception as e:
        logger.error(f"Dashboard error: {e}")
